variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  LM_JAVA_VERSION: 11
  SAST_JAVA_VERSION: 11
  JAR_FILE: h3lp3r-back.jar

services:
  - docker:dind 

stages:
  - prepare
  - build
  - build_docker

# prepare: Optiene la versiÃ³n del proeycto a partir del package.json o a partir del pom.xml
prepare_job:
  #only:
  #  - master
  stage: prepare
  image: python:3.8-slim
  script:
    - python3 -c "from xml.etree.ElementTree import parse; print(parse('./pom.xml').getroot().find('./{*}version').text)"
    - echo VERSION=$VERSION > vars.env
  artifacts:
    reports:
      dotenv: vars.env
    expire_in: 1 day  

# build: Compila y crea el artefacto o artefactos del proyecto
build_job:
  #only:
  #  - master
  stage: build
  image: maven:3.6.3-jdk-11
  cache:
    paths:
      - .m2/repository/
  script:
    - mvn clean package -B -DskipTests=true
    - mv target/*.jar ./$JAR_FILE 
  artifacts:
    paths:
      - ./$JAR_FILE
    expire_in: 1 day   
  dependencies: 
    - prepare_job

# build_docker: Crea la imagen docker y la sube al registro, en este caso al DockerHUB
build_docker_job:
  #only:
  #  - master
  stage: build_docker
  image: docker:latest
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY --
    - "echo Image to build and push: ${CI_REGISTRY_IMAGE}:${VERSION}"
  script:
    - docker build --build-arg "JAR_FILE=$JAR_FILE" -t qualityobjects/h3lp3r-back:$VERSION -t qualityobjects/h3lp3r-back:latest .
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:$VERSION"
  dependencies: 
    - prepare_job
    - build_job
